/**
 * 状态模式：属于行为型模式。
 * 
 * 适用场景：一个对象有多种状态，不同的状态对应不同的行为，此时可以将状态和行为绑定，采用状态模式进行开发。
 * 
 * 核心：
 * – 用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题
 * 
 * 结构：
 * – Context上下文类：上下文类中维护一个State对象，定义了当前的状态。通常代表对象本身。
 * – State抽象状态类
 * – ConcreteState具体状态类：每一个类封装了一个状态对应的行为，代表对象的状态
 */
package t17_state;