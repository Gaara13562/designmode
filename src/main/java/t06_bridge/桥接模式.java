/**
 * t06_bridge.ComputerWithoutBridge：没有使用桥接模式，非常繁琐，
 * 		其原因在于每一个子类承担了两个维度：品牌维度+类型维度
 * 		如：联想笔记本，承担了联想品牌和笔记本这个类型，违背了单一职责原则；
 * 
 * 解决方案：桥接模式，属于结构型模式
 * 		将品牌和类型作为两个维度，分别构建自己的类型，然后通过一个属性将两者桥接起来，因此也叫桥接模式。
 * 		具体代码：t06_bridge.ComputerWithBridge（类型维度） 和 t06_bridge.Brand（品牌维度）
 * 		修改之后的代码，如果要添加新的品牌，新建Brand子类即可，添加类型新建ComputerWithBridge子类即可。
 * 
 * 桥接模式核心要点：
 * 		处理多层继承结构，处理多维度变化的场景，将各个维度设计成独立的继承结构，
 * 		使各个维度可以独立的扩展，在抽象层建立关联。
 */
package t06_bridge;
