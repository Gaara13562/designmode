/**
 * 装饰模式（装饰器模式，包装器模式）：属于结构型模式。动态的为一个对象添加新的功能。
 * -- 装饰模式是一种用于替代继承的技术，无需通过继承增加子类就能拓展对象的新功能。
 * -- 使用对象的关联关系代替继承关系，更加灵活，而且避免了类型体系的快速膨胀。
 * 
 * 实现细节：
 * – Component抽象构件角色：
 *	 • 真实对象和装饰对象有相同的接口。这样，客户端对象就能够以与真实对象相同的方式同装饰对象交互。
 * – ConcreteComponent 具体构件角色(真实对象)：
 *	 • io流中的FileInputStream、FileOutputStream
 * – Decorator装饰角色（也实现了Component接口）：
 *	 • 持有一个抽象构件的引用。装饰对象接受所有客户端的请求，并把这些请求转发给真实的对象。这样就能在真实对象调用前后增加新的功能。
 * – ConcreteDecorator具体装饰角色：
 *	 • 负责给构件对象增加新的责任。
 */
package t08_decorator;